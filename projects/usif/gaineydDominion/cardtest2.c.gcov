        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <time.h>
        -:    6:
        -:    7:// The following is a unit test for the village card function within the dominion.c/dominon.h file
        -:    8:
        1:    9:void testVillageCard() {
        1:   10:	srand(time(NULL));
        1:   11:	int seed = rand();
        1:   12:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   13:	
        -:   14:	struct gameState g;
        1:   15:	initializeGame(2, k, seed, &g);
        1:   16:	int choice1 = -1, 
        1:   17:	    choice2 = -1,
        1:   18:	    choice3 = -1;	
        1:   19:	int card = village;
        1:   20:	int bonus = 0;
        1:   21:	int handPos = 1;
        1:   22:	int player1 = 0;
        1:   23:	int player2 = 1;
        1:   24:	int initialDeckCount = g.deckCount[player1];
        1:   25:	int initialHandCount = g.handCount[player1];
        1:   26:	int initialDeckCount2 = g.deckCount[player2];
        1:   27:	int initialHandCount2 = g.handCount[player2];
        1:   28:	g.hand[player1][handPos] = village;
        -:   29:	int originalSupply[10];
        -:   30:	int i;
        1:   31:	int success = 1;
       11:   32:	for (i = 0; i < 10; i++) {
       10:   33:		originalSupply[i] = g.supplyCount[i];
        -:   34:	}
        -:   35:
        1:   36:	printf("--------------- TESTING CARD: village ---------------\n");
        1:   37:	printf("Test 1: Call the card function\n"); 
        1:   38:	if (cardEffect(card, choice1, choice2, choice3, &g, handPos, &bonus) == 0) {
        1:   39:		printf("villageCard(): PASS when test contains return value == 0\n");
        -:   40:	} else {
    #####:   41:		success = 0; 
    #####:   42:		printf("villageCard(): FAIL when test contains return value == 0\n");
        -:   43:	}
        -:   44:
        1:   45:	printf("Test 2: Check player 1 deck count\n"); 
        1:   46:	if (g.deckCount[player1] == (initialDeckCount - 1)) {
        1:   47:		printf("villageCard(): PASS when test contains new deckCount that is 1 less than the previous deckCount\n");
        -:   48:	} else {
    #####:   49:		success = 0; 
    #####:   50:		printf("villageCard(): FAIL when test contains new deckCount that is 1 less than the previous deckCount\n");
        -:   51:	}
        -:   52:
        1:   53:	printf("Test 3: Check player 1 hand count\n"); 
        1:   54:	if (g.handCount[player1] == initialHandCount) {
        1:   55:		printf("villageCard(): PASS when test contains handCount that is equal to the previous deckCount\n");
        -:   56:	} else {
    #####:   57:		success = 0; 
    #####:   58:		printf("villageCard(): FAIL when test contains handCount that is equal to the previous deckCount\n");
        -:   59:	}
        -:   60:
        1:   61:	printf("Test 4: Check played card count\n"); 
        1:   62:	if (g.playedCardCount == 1) {
        1:   63:		printf("villageCard(): PASS when test contains playedCardCount of 1\n");
        -:   64:	} else {
    #####:   65:		success = 0; 
    #####:   66:		printf("villageCard(): FAIL when test contains playedCardCount of 1\n");
        -:   67:	}
        -:   68:
        1:   69:	printf("Test 5: Check number of actions\n"); 
        1:   70:	if (g.numActions == 3) {
        1:   71:		printf("villageCard(): PASS when test contains numActions == 3\n");
        -:   72:	} else {
    #####:   73:		success = 0; 
    #####:   74:		printf("villageCard(): FAIL when test contains numActions == 3\n");
        -:   75:	}
        -:   76:
        1:   77:	printf("Test 6: Check to see if village card is in the played cards pile\n"); 
        1:   78:	if (g.playedCards[g.playedCardCount - 1] == village) {
        1:   79:		printf("villageCard(): PASS when test contains village card in the playedCards pile\n");
        -:   80:	} else {
    #####:   81:		success = 0; 
    #####:   82:		printf("villageCard(): FAIL when test contains village card in the playedCards pile\n");
        -:   83:	}
        -:   84:
        1:   85:	printf("Test 7: Check to see if player 2 deck count state is unchanged\n"); 
        1:   86:	if (g.deckCount[player2] == initialDeckCount2) {
        1:   87:		printf("villageCard(): PASS when test contains deckCount of player 2 state unchanged\n");
        -:   88:	} else {
    #####:   89:		success = 0; 
    #####:   90:		printf("villageCard(): FAIL when test contains deckCount of player 2 state unchanged\n");
        -:   91:	}
        -:   92:
        1:   93:	printf("Test 8: Check to see if player 2 hand count state is unchanged\n"); 
        1:   94:	if (g.handCount[player2] == initialHandCount2) {
        1:   95:		printf("villageCard(): PASS when test contains handCount of player 2 state unchanged\n");
        -:   96:	} else {
    #####:   97:		success = 0; 
    #####:   98:		printf("villageCard(): FAIL when test contains handCount of player 2 state unchanged\n");
        -:   99:	}
        -:  100:
        1:  101:	printf("Test 9: Check to see if victory card supply state is unchanged\n"); 
        1:  102:	if (g.supplyCount[estate] == 8 && g.supplyCount[duchy] == 8 && g.supplyCount[province] == 8) {
        1:  103:		printf("villageCard(): PASS when test contains supply of victory card state unchanged\n");
        -:  104:	} else {
    #####:  105:		success = 0; 
    #####:  106:		printf("villageCard(): FAIL when test contains supply of victory card state unchanged\n");
        -:  107:	}
        -:  108:
        1:  109:	printf("Test 10: Check to see if kingdom card supply state is unchanged\n"); 
        1:  110:	int isUnchanged = 1;
       11:  111:	for (i = 0; i < 10; i++) {
       10:  112:		if (g.supplyCount[i] != originalSupply[i]) {
    #####:  113:			isUnchanged = 0;
        -:  114:		}
        -:  115:	} 
        1:  116:	if (isUnchanged) {
        1:  117:		printf("villageCard(): PASS when test contains supply of kingdom cards state unchanged\n");
        -:  118:	} else {
    #####:  119:		success = 0; 
    #####:  120:		printf("villageCard(): FAIL when test contains supply of kingdom cards state unchanged\n");
        -:  121:	}	
        1:  122:	if (success) {
        1:  123:		printf("\n--------------- TESTING SUCCESS --------------- \n\n");
        -:  124:	} else {
    #####:  125:		printf("\n--------------- TESTING FAILURE --------------- \n\n");
        -:  126:	}
        1:  127:	printf("\n--------------- TESTING COMPLETE for village --------------- \n\n");
        1:  128:}
        -:  129:
        1:  130:int main(int argc, char* argv[]) {
        1:  131:	testVillageCard();
        1:  132:	return 0;
        -:  133:}
