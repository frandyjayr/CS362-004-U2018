-------------------- TESTING ADVENTURER CARD ---------------------
NUMBER OF ITERATIONS: 9000

Number of cardEffect() failures: 0
Number of shuffle() failures: 0
Number of drawCard() failures: 0
Number of handCount failures: 0
Number of deckCount failures: 8863
Number of treasureCount failures: 0

Number of cardEffect() passes: 9000
Number of shuffle() passes: 9000
Number of drawCard() passes: 9000
Number of handCount passes: 9000
Number of deckCount passes: 137
Number of treasureCount passes: 9000

RANDOM TESTS FAILURE!
File 'randomtestadventurer.c'
Lines executed:90.83% of 109
Creating 'randomtestadventurer.c.gcov'

File 'dominion.c'
Lines executed:18.87% of 567
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       42:    8:int compare(const void* a, const void* b) {
       42:    9:  if (*(int*)a > *(int*)b)
        5:   10:    return 1;
       37:   11:  if (*(int*)a < *(int*)b)
       10:   12:    return -1;
       27:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:    
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:    
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:    
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:	      return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:    
        -:   68:    
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:    
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:    
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:    
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:    
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)           //loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)                   //loop chosen cards
        -:  109:        {
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        2:  115:		  if (numPlayers == 2){
        1:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:	      else
        -:  121:                {
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:                }
       10:  124:	      break;
        -:  125:            }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:            {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:        
        -:  132:    }
        -:  133:    
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:    
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:        {
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:        }
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:        {
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;
        -:  150:        }
        -:  151:    }
        -:  152:    
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:	  return -1;
        -:  159:        }
        -:  160:    }
        -:  161:    
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //    {
        -:  171:      //      drawCard(i, state);
        -:  172:      //    }
        -:  173:    }
        -:  174:    
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:    
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:    
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:    
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:    
        1:  198:  return 0;
        -:  199:}
        -:  200:
        4:  201:int shuffle(int player, struct gameState *state) {
        -:  202:    
        -:  203:    
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:    
        4:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:    
       37:  214:  while (state->deckCount[player] > 0) {
       29:  215:    card = floor(Random() * state->deckCount[player]);
       29:  216:    newDeck[newDeckPos] = state->deck[player][card];
       29:  217:    newDeckPos++;
       78:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       49:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       29:  221:    state->deckCount[player]--;
        -:  222:  }
       33:  223:  for (i = 0; i < newDeckPos; i++) {
       29:  224:    state->deck[player][i] = newDeck[i];
       29:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:    
        4:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0;         //tracks coins gain from actions
        -:  235:    
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:    
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:    
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:    
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:    
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:    
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:    
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:    
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:    
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:    
    #####:  280:  who = state->whoseTurn;
        -:  281:    
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:        
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:    
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:    
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:    
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:    
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:    
    #####:  343:  return count;
        -:  344:}
        -:  345:
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:    
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:    
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:    
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:    
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:    
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:    
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:    
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:	  j++;
        -:  407:        }
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:    
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:    
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:    
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:    
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:    
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:    
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:	  players[i] = -9999;
        -:  470:        }
        -:  471:      else
        -:  472:        {
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:    
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:        {
    #####:  483:	  j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:    
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:	  players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:    
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:	  j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:    
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:        {
    #####:  514:	  players[i] = 1;
        -:  515:        }
        -:  516:      else
        -:  517:        {
    #####:  518:	  players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:    
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        7:  525:int drawCard(int player, struct gameState *state)
        -:  526:{    int count;
        -:  527:  int deckCounter;
        7:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:        
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:        
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:        
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:        
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:        
    #####:  548:    state->discardCount[player] = 0;
        -:  549:        
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:        
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:        
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:        
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:        
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:    
        -:  567:  else{
        7:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:        
        7:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        7:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        7:  576:    state->deckCount[player]--;
        7:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:    
        7:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:    
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        1:  646:int adventurerCard(struct gameState *state) {
        1:  647:  int currentPlayer = whoseTurn(state);
        -:  648:  int cardDrawn;
        1:  649:  int drawntreasure = 0;
        -:  650:  int temphand[MAX_HAND];
        1:  651:  int z = 0;
        4:  652:  while(drawntreasure<2){
        2:  653:    shuffle(currentPlayer, state);
        2:  654:    drawCard(currentPlayer, state);
        2:  655:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  656:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  657:      drawntreasure++;
        -:  658:    else{
    #####:  659:      temphand[z]=cardDrawn;
    #####:  660:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  661:      z++;
        -:  662:    }
        -:  663:  }
        2:  664:  while(z-1>=0){
    #####:  665:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  666:    z=z-1;
        -:  667:  }
        1:  668:  return 0;
        -:  669:}
        -:  670:
    #####:  671:int smithyCard(struct gameState *state, int handPos) {
        -:  672:  int i;
    #####:  673:  int currentPlayer = whoseTurn(state);
        -:  674:    
        -:  675:  //+3 Cards
    #####:  676:  for (i = 1; i < 3; i++)
        -:  677:    {
    #####:  678:      drawCard(currentPlayer, state);
        -:  679:    }
        -:  680:    
        -:  681:  //discard card from hand
    #####:  682:  discardCard(handPos, currentPlayer, state, 0);
    #####:  683:  return 0;
        -:  684:}
        -:  685:
    #####:  686:int councilRoomCard(struct gameState *state, int handPos) {
    #####:  687:  int currentPlayer = whoseTurn(state);
        -:  688:  int i;
        -:  689:    
        -:  690:  //+4 Cards
    #####:  691:  for (i = 0; i < 4; i++)
        -:  692:    {
    #####:  693:      drawCard(i, state);
        -:  694:    }
        -:  695:    
        -:  696:  //+1 Buy
    #####:  697:  state->numBuys++;
        -:  698:    
        -:  699:  //Each other player draws a card
    #####:  700:  for (i = 0; i < state->numPlayers; i++)
        -:  701:    {
    #####:  702:      if ( i != currentPlayer )
        -:  703:        {
    #####:  704:	  drawCard(i, state);
        -:  705:        }
        -:  706:    }
        -:  707:    
        -:  708:  //put played card in played card pile
    #####:  709:  discardCard(handPos, currentPlayer, state, 0);
        -:  710:    
    #####:  711:  return 0;
        -:  712:}
        -:  713:
    #####:  714:int feastCard(struct gameState *state, int choice1) {
        -:  715:  int i;
        -:  716:  int x;
    #####:  717:  int currentPlayer = whoseTurn(state);
        -:  718:  int temphand[MAX_HAND];
        -:  719:    
        -:  720:  //gain card with cost up to 5
        -:  721:  //Backup hand
    #####:  722:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  723:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  724:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  725:  }
        -:  726:  //Backup hand
        -:  727:    
        -:  728:  //Update Coins for Buy
    #####:  729:  updateCoins(currentPlayer, state, 6);
    #####:  730:  x = 1;//Condition to loop on
    #####:  731:  while( x == 1) {//Buy one card
    #####:  732:    if (supplyCount(choice1, state) <= 0){
        -:  733:      if (DEBUG)
        -:  734:	printf("None of that card left, sorry!\n");
        -:  735:            
        -:  736:      if (DEBUG){
        -:  737:	printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  738:      }
        -:  739:    }
    #####:  740:    else if (state->coins < getCost(choice1)){
    #####:  741:      printf("That card is too expensive!\n");
        -:  742:            
        -:  743:      if (DEBUG){
        -:  744:	printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  745:      }
        -:  746:    }
        -:  747:    else{
        -:  748:            
        -:  749:      if (DEBUG){
        -:  750:	printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  751:      }
        -:  752:            
    #####:  753:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  754:      x = 0;//No more buying cards
        -:  755:            
        -:  756:      if (DEBUG){
        -:  757:	printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  758:      }
        -:  759:            
        -:  760:    }
        -:  761:  }
        -:  762:    
        -:  763:  //Reset Hand
    #####:  764:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  765:    state->hand[currentPlayer][i] = temphand[i];
    #####:  766:    temphand[i] = -1;
        -:  767:  }
        -:  768:  //Reset Hand
        -:  769:    
    #####:  770:  return 0;
        -:  771:}
        -:  772:
    #####:  773:int mineCard(struct gameState *state, int choice1, int choice2, int handPos) {
        -:  774:  int i;
        -:  775:  int j;
    #####:  776:  int currentPlayer = whoseTurn(state);
        -:  777:    
    #####:  778:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  779:    
    #####:  780:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  781:    {
    #####:  782:      return -1;
        -:  783:    }
        -:  784:    
    #####:  785:  if (choice2 > treasure_map || choice2 < curse)
        -:  786:    {
    #####:  787:      return -1;
        -:  788:    }
        -:  789:    
    #####:  790:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  791:    {
    #####:  792:      return -1;
        -:  793:    }
        -:  794:    
    #####:  795:  gainCard(choice2, state, 2, currentPlayer);
        -:  796:    
        -:  797:  //discard card from hand
    #####:  798:  discardCard(handPos, currentPlayer, state, 0);
        -:  799:    
        -:  800:  //discard trashed card
    #####:  801:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:    {
    #####:  803:      if (state->hand[currentPlayer][i] == j)
        -:  804:        {
    #####:  805:	  discardCard(i, currentPlayer, state, 0);
    #####:  806:	  break;
        -:  807:        }
        -:  808:    }
        -:  809:    
    #####:  810:  return 0;
        -:  811:}
        -:  812:
        1:  813:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  814:{
        1:  815:  if(card == adventurer) {
        1:  816:    return adventurerCard(state);
    #####:  817:  } else if(card == smithy) {
    #####:  818:    return smithyCard(state, handPos);
    #####:  819:  } else if(card == council_room) {
    #####:  820:    return councilRoomCard(state, handPos);
    #####:  821:  } else if(card == feast) {
    #####:  822:    return feastCard(state, choice1);
    #####:  823:  } else if(card == mine) {
    #####:  824:    return mineCard(state, choice1, choice2, handPos);
        -:  825:  } else {
        -:  826:    int i;
        -:  827:    int j;
        -:  828:    int k;
        -:  829:    int index;
    #####:  830:    int currentPlayer = whoseTurn(state);
    #####:  831:    int nextPlayer = currentPlayer + 1;
        -:  832:    
    #####:  833:    int tributeRevealedCards[2] = {-1, -1};
    #####:  834:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  835:      nextPlayer = 0;
        -:  836:    }
        -:  837:    
        -:  838:    
        -:  839:    //uses switch to select card and perform actions
    #####:  840:    switch( card )
        -:  841:      {
        -:  842:      case gardens:
    #####:  843:	return -1;
        -:  844:            
        -:  845:      case remodel:
    #####:  846:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:            
    #####:  848:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  849:	  {
    #####:  850:	    return -1;
        -:  851:	  }
        -:  852:            
    #####:  853:	gainCard(choice2, state, 0, currentPlayer);
        -:  854:            
        -:  855:	//discard card from hand
    #####:  856:	discardCard(handPos, currentPlayer, state, 0);
        -:  857:            
        -:  858:	//discard trashed card
    #####:  859:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  860:	  {
    #####:  861:	    if (state->hand[currentPlayer][i] == j)
        -:  862:	      {
    #####:  863:		discardCard(i, currentPlayer, state, 0);
    #####:  864:		break;
        -:  865:	      }
        -:  866:	  }
        -:  867:            
        -:  868:            
    #####:  869:	return 0;
        -:  870:            
        -:  871:      case village:
        -:  872:	//+1 Card
    #####:  873:	drawCard(currentPlayer, state);
        -:  874:            
        -:  875:	//+2 Actions
    #####:  876:	state->numActions = state->numActions + 2;
        -:  877:            
        -:  878:	//discard played card from hand
    #####:  879:	discardCard(handPos, currentPlayer, state, 0);
    #####:  880:	return 0;
        -:  881:            
        -:  882:      case baron:
    #####:  883:	state->numBuys++;//Increase buys by 1!
    #####:  884:	if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  885:	  int p = 0;//Iterator for hand!
    #####:  886:	  int card_not_discarded = 1;//Flag for discard set!
    #####:  887:	  while(card_not_discarded){
    #####:  888:	    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  889:	      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  890:	      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  891:	      state->discardCount[currentPlayer]++;
    #####:  892:	      for (;p < state->handCount[currentPlayer]; p++){
    #####:  893:		state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  894:	      }
    #####:  895:	      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  896:	      state->handCount[currentPlayer]--;
    #####:  897:	      card_not_discarded = 0;//Exit the loop
        -:  898:	    }
    #####:  899:	    else if (p > state->handCount[currentPlayer]){
        -:  900:	      if(DEBUG) {
        -:  901:		printf("No estate cards in your hand, invalid choice\n");
        -:  902:		printf("Must gain an estate if there are any\n");
        -:  903:	      }
    #####:  904:	      if (supplyCount(estate, state) > 0){
    #####:  905:		gainCard(estate, state, 0, currentPlayer);
    #####:  906:		state->supplyCount[estate]--;//Decrement estates
    #####:  907:		if (supplyCount(estate, state) == 0){
    #####:  908:		  isGameOver(state);
        -:  909:		}
        -:  910:	      }
    #####:  911:	      card_not_discarded = 0;//Exit the loop
        -:  912:	    }
        -:  913:                    
        -:  914:	    else{
    #####:  915:	      p++;//Next card
        -:  916:	    }
        -:  917:	  }
        -:  918:	}
        -:  919:            
        -:  920:	else{
    #####:  921:	  if (supplyCount(estate, state) > 0){
    #####:  922:	    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  923:	    state->supplyCount[estate]--;//Decrement Estates
    #####:  924:	    if (supplyCount(estate, state) == 0){
    #####:  925:	      isGameOver(state);
        -:  926:	    }
        -:  927:	  }
        -:  928:	}
        -:  929:            
        -:  930:            
    #####:  931:	return 0;
        -:  932:            
        -:  933:      case great_hall:
        -:  934:	//+1 Card
    #####:  935:	drawCard(currentPlayer, state);
        -:  936:            
        -:  937:	//+1 Actions
    #####:  938:	state->numActions++;
        -:  939:            
        -:  940:	//discard card from hand
    #####:  941:	discardCard(handPos, currentPlayer, state, 0);
    #####:  942:	return 0;
        -:  943:            
        -:  944:      case minion:
        -:  945:	//+1 action
    #####:  946:	state->numActions++;
        -:  947:            
        -:  948:	//discard card from hand
    #####:  949:	discardCard(handPos, currentPlayer, state, 0);
        -:  950:            
    #####:  951:	if (choice1)        //+2 coins
        -:  952:	  {
    #####:  953:	    state->coins = state->coins + 2;
        -:  954:	  }
        -:  955:            
    #####:  956:	else if (choice2)        //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  957:	  {
        -:  958:	    //discard hand
    #####:  959:	    while(numHandCards(state) > 0)
        -:  960:	      {
    #####:  961:		discardCard(handPos, currentPlayer, state, 0);
        -:  962:	      }
        -:  963:                
        -:  964:	    //draw 4
    #####:  965:	    for (i = 0; i < 4; i++)
        -:  966:	      {
    #####:  967:		drawCard(currentPlayer, state);
        -:  968:	      }
        -:  969:                
        -:  970:	    //other players discard hand and redraw if hand size > 4
    #####:  971:	    for (i = 0; i < state->numPlayers; i++)
        -:  972:	      {
    #####:  973:		if (i != currentPlayer)
        -:  974:		  {
    #####:  975:		    if ( state->handCount[i] > 4 )
        -:  976:		      {
        -:  977:			//discard hand
    #####:  978:			while( state->handCount[i] > 0 )
        -:  979:			  {
    #####:  980:			    discardCard(handPos, i, state, 0);
        -:  981:			  }
        -:  982:                            
        -:  983:			//draw 4
    #####:  984:			for (j = 0; j < 4; j++)
        -:  985:			  {
    #####:  986:			    drawCard(i, state);
        -:  987:			  }
        -:  988:		      }
        -:  989:		  }
        -:  990:	      }
        -:  991:                
        -:  992:	  }
    #####:  993:	return 0;
        -:  994:            
        -:  995:      case steward:
    #####:  996:	if (choice1 == 1)
        -:  997:	  {
        -:  998:	    //+2 cards
    #####:  999:	    drawCard(currentPlayer, state);
    #####: 1000:	    drawCard(currentPlayer, state);
        -: 1001:	  }
    #####: 1002:	else if (choice1 == 2)
        -: 1003:	  {
        -: 1004:	    //+2 coins
    #####: 1005:	    state->coins = state->coins + 2;
        -: 1006:	  }
        -: 1007:	else
        -: 1008:	  {
        -: 1009:	    //trash 2 cards in hand
    #####: 1010:	    discardCard(choice2, currentPlayer, state, 1);
    #####: 1011:	    discardCard(choice3, currentPlayer, state, 1);
        -: 1012:	  }
        -: 1013:            
        -: 1014:	//discard card from hand
    #####: 1015:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1016:	return 0;
        -: 1017:            
        -: 1018:      case tribute:
    #####: 1019:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	  if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	    state->deckCount[nextPlayer]--;
        -: 1023:	  }
    #####: 1024:	  else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	    state->discardCount[nextPlayer]--;
        -: 1027:	  }
        -: 1028:	  else{
        -: 1029:	    //No Card to Reveal
        -: 1030:	    if (DEBUG){
        -: 1031:	      printf("No cards to reveal\n");
        -: 1032:	    }
        -: 1033:	  }
        -: 1034:	}
        -: 1035:            
        -: 1036:	else{
    #####: 1037:	  if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	      state->deckCount[nextPlayer]++;
    #####: 1041:	      state->discard[nextPlayer][i] = -1;
    #####: 1042:	      state->discardCount[nextPlayer]--;
        -: 1043:	    }
        -: 1044:                    
    #####: 1045:	    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1046:	  }
    #####: 1047:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	  state->deckCount[nextPlayer]--;
    #####: 1050:	  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	  state->deckCount[nextPlayer]--;
        -: 1053:	}
        -: 1054:            
    #####: 1055:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1056:	  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	  state->playedCardCount++;
    #####: 1058:	  tributeRevealedCards[1] = -1;
        -: 1059:	}
        -: 1060:            
    #####: 1061:	for (i = 0; i <= 2; i ++){
    #####: 1062:	  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	    state->coins += 2;
        -: 1064:	  }
        -: 1065:                
    #####: 1066:	  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	    drawCard(currentPlayer, state);
    #####: 1068:	    drawCard(currentPlayer, state);
        -: 1069:	  }
        -: 1070:	  else{//Action Card
    #####: 1071:	    state->numActions = state->numActions + 2;
        -: 1072:	  }
        -: 1073:	}
        -: 1074:            
    #####: 1075:	return 0;
        -: 1076:            
        -: 1077:      case ambassador:
    #####: 1078:	j = 0;        //used to check if player has enough cards to discard
        -: 1079:            
    #####: 1080:	if (choice2 > 2 || choice2 < 0)
        -: 1081:	  {
    #####: 1082:	    return -1;
        -: 1083:	  }
        -: 1084:            
    #####: 1085:	if (choice1 == handPos)
        -: 1086:	  {
    #####: 1087:	    return -1;
        -: 1088:	  }
        -: 1089:            
    #####: 1090:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	  {
    #####: 1092:	    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	      {
    #####: 1094:		j++;
        -: 1095:	      }
        -: 1096:	  }
    #####: 1097:	if (j < choice2)
        -: 1098:	  {
    #####: 1099:	    return -1;
        -: 1100:	  }
        -: 1101:            
        -: 1102:	if (DEBUG)
        -: 1103:	  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:            
        -: 1105:	//increase supply count for choosen card by amount being discarded
    #####: 1106:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:            
        -: 1108:	//each other player gains a copy of revealed card
    #####: 1109:	for (i = 0; i < state->numPlayers; i++)
        -: 1110:	  {
    #####: 1111:	    if (i != currentPlayer)
        -: 1112:	      {
    #####: 1113:		gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1114:	      }
        -: 1115:	  }
        -: 1116:            
        -: 1117:	//discard played card from hand
    #####: 1118:	discardCard(handPos, currentPlayer, state, 0);
        -: 1119:            
        -: 1120:	//trash copies of cards returned to supply
    #####: 1121:	for (j = 0; j < choice2; j++)
        -: 1122:	  {
    #####: 1123:	    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	      {
    #####: 1125:		if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		  {
    #####: 1127:		    discardCard(i, currentPlayer, state, 1);
    #####: 1128:		    break;
        -: 1129:		  }
        -: 1130:	      }
        -: 1131:	  }
        -: 1132:            
    #####: 1133:	return 0;
        -: 1134:            
        -: 1135:      case cutpurse:
        -: 1136:            
    #####: 1137:	updateCoins(currentPlayer, state, 2);
    #####: 1138:	for (i = 0; i < state->numPlayers; i++)
        -: 1139:	  {
    #####: 1140:	    if (i != currentPlayer)
        -: 1141:	      {
    #####: 1142:		for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		  {
    #####: 1144:		    if (state->hand[i][j] == copper)
        -: 1145:		      {
    #####: 1146:			discardCard(j, i, state, 0);
    #####: 1147:			break;
        -: 1148:		      }
    #####: 1149:		    if (j == state->handCount[i])
        -: 1150:		      {
    #####: 1151:			for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			  {
        -: 1153:			    if (DEBUG)
        -: 1154:			      printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1155:			  }
    #####: 1156:			break;
        -: 1157:		      }
        -: 1158:		  }
        -: 1159:                    
        -: 1160:	      }
        -: 1161:                
        -: 1162:	  }
        -: 1163:            
        -: 1164:	//discard played card from hand
    #####: 1165:	discardCard(handPos, currentPlayer, state, 0);
        -: 1166:            
    #####: 1167:	return 0;
        -: 1168:            
        -: 1169:            
        -: 1170:      case embargo:
        -: 1171:	//+2 Coins
    #####: 1172:	state->coins = state->coins + 2;
        -: 1173:            
        -: 1174:	//see if selected pile is in play
    #####: 1175:	if ( state->supplyCount[choice1] == -1 )
        -: 1176:	  {
    #####: 1177:	    return -1;
        -: 1178:	  }
        -: 1179:            
        -: 1180:	//add embargo token to selected supply pile
    #####: 1181:	state->embargoTokens[choice1]++;
        -: 1182:            
        -: 1183:	//trash card
    #####: 1184:	discardCard(handPos, currentPlayer, state, 1);
    #####: 1185:	return 0;
        -: 1186:            
        -: 1187:      case outpost:
        -: 1188:	//set outpost flag
    #####: 1189:	state->outpostPlayed++;
        -: 1190:            
        -: 1191:	//discard card
    #####: 1192:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:	return 0;
        -: 1194:            
        -: 1195:      case salvager:
        -: 1196:	//+1 buy
    #####: 1197:	state->numBuys++;
        -: 1198:            
    #####: 1199:	if (choice1)
        -: 1200:	  {
        -: 1201:	    //gain coins equal to trashed card
    #####: 1202:	    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	    //trash card
    #####: 1204:	    discardCard(choice1, currentPlayer, state, 1);
        -: 1205:	  }
        -: 1206:            
        -: 1207:	//discard card
    #####: 1208:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:	return 0;
        -: 1210:            
        -: 1211:      case sea_hag:
    #####: 1212:	for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	  if (i != currentPlayer){
    #####: 1214:	    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];                state->deckCount[i]--;
    #####: 1215:	    state->discardCount[i]++;
    #####: 1216:	    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	  }
        -: 1218:	}
    #####: 1219:	return 0;
        -: 1220:            
        -: 1221:      case treasure_map:
        -: 1222:	//search hand for another treasure_map
    #####: 1223:	index = -1;
    #####: 1224:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	  {
    #####: 1226:	    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	      {
    #####: 1228:		index = i;
    #####: 1229:		break;
        -: 1230:	      }
        -: 1231:	  }
    #####: 1232:	if (index > -1)
        -: 1233:	  {
        -: 1234:	    //trash both treasure cards
    #####: 1235:	    discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	    discardCard(index, currentPlayer, state, 1);
        -: 1237:                
        -: 1238:	    //gain 4 Gold cards
    #####: 1239:	    for (i = 0; i < 4; i++)
        -: 1240:	      {
    #####: 1241:		gainCard(gold, state, 1, currentPlayer);
        -: 1242:	      }
        -: 1243:                
        -: 1244:	    //return success
    #####: 1245:	    return 1;
        -: 1246:	  }
        -: 1247:            
        -: 1248:	//no second treasure_map found in hand
    #####: 1249:	return -1;
        -: 1250:      }
        -: 1251:    
    #####: 1252:    return -1;
        -: 1253:  }
        -: 1254:}
        -: 1255:
    #####: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:    
        -: 1259:  //if card is not trashed, added to Played pile
    #####: 1260:  if (trashFlag < 1)
        -: 1261:    {
        -: 1262:      //add card to played pile
    #####: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:    
        -: 1267:  //set played card to -1
    #####: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:    
        -: 1270:  //remove card from player's hand
    #####: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) )     //last card in hand array is played
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
    #####: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
    #####: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
    #####: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:    
    #####: 1291:  return 0;
        -: 1292:}
        -: 1293:
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:    
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1300:    {
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:    
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:    
    #####: 1309:  if (toFlag == 1)
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:    
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:    
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
        1: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:    
        -: 1335:  //reset coin count
        1: 1336:  state->coins = 0;
        -: 1337:    
        -: 1338:  //add coins for each Treasure card in player's hand
        6: 1339:  for (i = 0; i < state->handCount[player]; i++)
        -: 1340:    {
        5: 1341:      if (state->hand[player][i] == copper)
        -: 1342:        {
        4: 1343:	  state->coins += 1;
        -: 1344:        }
        1: 1345:      else if (state->hand[player][i] == silver)
        -: 1346:        {
    #####: 1347:	  state->coins += 2;
        -: 1348:        }
        1: 1349:      else if (state->hand[player][i] == gold)
        -: 1350:        {
    #####: 1351:	  state->coins += 3;
        -: 1352:        }
        -: 1353:    }
        -: 1354:    
        -: 1355:  //add bonus
        1: 1356:  state->coins += bonus;
        -: 1357:    
        1: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
