        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <time.h>
        -:    5:
        -:    6:// The following is a unit test for the adventurer card function within the dominion.c/dominon.h file
        -:    7:
        1:    8:void testAdventurerCard() {
        1:    9:	srand(time(NULL));
        1:   10:	int seed = rand();
        1:   11:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   12:	
        -:   13:	struct gameState g;
        1:   14:	initializeGame(2, k, seed, &g);
        1:   15:	int choice1 = -1, 
        1:   16:	    choice2 = -1,
        1:   17:	    choice3 = -1;	
        1:   18:	int card = adventurer;
        1:   19:	int bonus = 0;
        1:   20:	int handPos = 1;
        1:   21:	int player1 = 0;
        1:   22:	int player2 = 1;
        1:   23:	int initialHandCount = g.handCount[player1];
        1:   24:	int initialHandCount2 = g.handCount[player2];
        1:   25:	int initialDeckCount2 = g.deckCount[player2];
        -:   26:	int originalSupply[10];
        -:   27:	int i;
        1:   28:	int success = 1;
       11:   29:	for (i = 0; i < 10; i++) {
       10:   30:		originalSupply[i] = g.supplyCount[i];
        -:   31:	}
        -:   32:
        1:   33:	printf("--------------- TESTING CARD: Adventurer ---------------\n");
        1:   34:	printf("Test 1: Call card function\n");
        1:   35:	if (cardEffect(card, choice1, choice2, choice3, &g, handPos, &bonus) == 0) {
        1:   36:		printf("adventurerCard(): PASS when test contains return value == 0\n");
        -:   37:	} else {
    #####:   38:		success = 0;
    #####:   39:		printf("adventurerCard(): FAIL when test contains return value == 0\n");
        -:   40:	}
        -:   41:
        1:   42:	printf("Test 2: Check player 1 hand count\n");
        1:   43:	if (g.handCount[player1] == (initialHandCount + 1)) {
    #####:   44:		printf("adventurerCard(): PASS when test contains handCount that is 1 more than the previous handCount\n");
        -:   45:	} else {
        1:   46:		success = 0;
        1:   47:		printf("adventurerCard(): FAIL when test contains handCount that is 1 more than the previous handCount\n");
        -:   48:	}
        -:   49:
        1:   50:	printf("Test 3: Check played card count\n");
        1:   51:	if (g.playedCardCount == 1) {
    #####:   52:		printf("adventurerCard(): PASS when test contains playedCardCount of 1\n");
        -:   53:	} else {
        1:   54:		success = 0;
        1:   55:		printf("adventurerCard(): FAIL when test contains playedCardCount of 1\n");
        -:   56:	}
        -:   57:
        1:   58:	printf("Test 4: Check first card player 1 draws\n");
        1:   59:	int newCard1 = g.hand[player1][g.handCount[player1] - 2];
        1:   60:	if (newCard1 == copper || newCard1 == silver || newCard1 == gold) {
        1:   61:		printf("adventurerCard(): PASS when test contains the first new card that is copper, silver, or gold\n");
        -:   62:	} else {
    #####:   63:		success = 0;
    #####:   64:		printf("adventurerCard(): FAIL when test contains the first new card that is copper, silver, or gold\n");
        -:   65:	}
        -:   66:
        1:   67:	printf("Test 5: Check second card player 1 draws\n");
        1:   68:	int newCard2 = g.hand[player1][g.handCount[player1] - 1];
        1:   69:	if (newCard2 == copper || newCard2 == silver || newCard2 == gold) {
        1:   70:		printf("adventurerCard(): PASS when test contains the second new card that is copper, silver, or gold\n");
        -:   71:	} else {
    #####:   72:		success = 0;
    #####:   73:		printf("adventurerCard(): FAIL when test contains the second new card that is copper, silver, or gold\n");
        -:   74:	}
        -:   75:
        1:   76:	printf("Test 6: Check player 2 deck count state is unchanged\n");
        1:   77:	if (g.deckCount[player2] == initialDeckCount2) {
        1:   78:		printf("adventurerCard(): PASS when test contains deckCount of player 2 state unchanged\n");
        -:   79:	} else {
    #####:   80:		success = 0;
    #####:   81:		printf("adventurerCard(): FAIL when test contains deckCount of player 2 state unchanged\n");
        -:   82:	}
        -:   83:
        1:   84:	printf("Test 7: Check player 2 hand count state is unchanged\n");
        1:   85:	if (g.handCount[player2] == initialHandCount2) {
        1:   86:		printf("adventurerCard(): PASS when test contains handCount of player 2 state unchanged\n");
        -:   87:	} else {
    #####:   88:		success = 0;
    #####:   89:		printf("adventurerCard(): FAIL when test contains handCount of player 2 state unchanged\n");
        -:   90:	}
        -:   91:
        1:   92:	printf("Test 8: Check victory card state supply is unchanged\n");
        1:   93:	if (g.supplyCount[estate] == 8 && g.supplyCount[duchy] == 8 && g.supplyCount[province] == 8) {
        1:   94:		printf("adventurerCard(): PASS when test contains victory card state unchanged\n");
        -:   95:	} else {
    #####:   96:		success = 0;
    #####:   97:		printf("adventurerCard(): FAIL when test contains victory card state unchanged\n");
        -:   98:	}
        -:   99:
        1:  100:	printf("Test 9: Check kingdom card state supply is unchanged\n");
        1:  101:	int isUnchanged = 1;
       11:  102:	for (i = 0; i < 10; i++) {
       10:  103:		if (g.supplyCount[i] != originalSupply[i]) {
    #####:  104:			isUnchanged = 0;
        -:  105:		}
        -:  106:	}  
        1:  107:	if (isUnchanged) {
        1:  108:		printf("adventurerCard(): PASS when test contains supply of kingdom cards state unchanged\n"); 
        -:  109:	} else {
    #####:  110:		success = 0;
    #####:  111:		printf("adventurerCard(): FAIL when test contains supply of kingdom cards state unchanged\n"); 
        -:  112:	}
        -:  113:
        1:  114:	if (success) {
    #####:  115:		printf("\n\n---------------- TESTING SUCCESS --------------- \n");
        -:  116:	} else {
        1:  117:		printf("\n\n---------------- TESTING FAILURE --------------- \n");
        -:  118:	}
        1:  119:	printf("\n\n---------------- TESTING COMPLETE for Adventurer --------------- \n");
        -:  120:	
        1:  121:}
        -:  122:
        1:  123:int main(int argc, char* argv[]) {
        1:  124:	testAdventurerCard();
        1:  125:	return 0;
        -:  126:}
