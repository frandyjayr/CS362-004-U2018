        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <time.h>
        -:    5:
        -:    6:// The following is a unit test for the great hall card function within the dominion.c/dominon.h file
        -:    7:
        1:    8:void testGreatHallCard() {
        1:    9:	srand(time(NULL));
        1:   10:	int seed = rand();
        1:   11:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   12:	
        -:   13:	struct gameState g;
        1:   14:	initializeGame(2, k, seed, &g);
        1:   15:	int choice1 = -1, 
        1:   16:	    choice2 = -1,
        1:   17:	    choice3 = -1;	
        1:   18:	int card = great_hall;
        1:   19:	int bonus = 0;
        1:   20:	int handPos = 1;
        1:   21:	int player1 = 0,
        1:   22:	    player2 = 1;
        1:   23:	int initialDeckCount = g.deckCount[player1];
        1:   24:	int initialDeckCount2 = g.deckCount[player2];
        1:   25:	int initialHandCount = g.handCount[player1];
        1:   26:	int initialHandCount2 = g.handCount[player2];
        1:   27:	g.hand[player1][handPos] = great_hall;
        -:   28:	int originalSupply[10];
        -:   29:	int i;
        1:   30:	int success = 1;
       11:   31:	for (i = 0; i < 10; i++) {
       10:   32:		originalSupply[i] = g.supplyCount[i];
        -:   33:	}
        -:   34:
        1:   35:	printf("--------------- TESTING CARD: Great Hall ---------------\n");
        1:   36:	printf("Test 1: Call the card function\n");
        1:   37:	if (cardEffect(card, choice1, choice2, choice3, &g, handPos, &bonus) == 0) {
        1:   38:		printf("greatHallCard(): PASS when test contains return value == 0\n");
        -:   39:	} else {
    #####:   40:		success = 0;
    #####:   41:		printf("greatHallCard(): FAIL when test contains return value == 0\n");
        -:   42:	}
        -:   43:
        1:   44:	printf("Test 2: Check player 1 deck count\n");
        1:   45:	if (g.deckCount[player1] == (initialDeckCount - 1)) {
        1:   46:		printf("greatHallCard(): PASS when test contains new deckCount that is 1 less than the previous deckCount\n");
        -:   47:	} else {
    #####:   48:		success = 0;
    #####:   49:		printf("greatHallCard(): FAIL when test contains new deckCount that is 1 less than the previous deckCount\n");
        -:   50:	}
        -:   51:
        1:   52:	printf("Test 3: Check player 1 hand count\n");
        1:   53:	if (g.handCount[player1] == initialHandCount) {
        1:   54:		printf("greatHallCard(): PASS when test contains handCount that is equal to the previous deckCount\n");
        -:   55:	} else {
    #####:   56:		success = 0;
    #####:   57:		printf("greatHallCard(): FAIL when test contains handCount that is equal to the previous deckCount\n");
        -:   58:	}
        -:   59:
        1:   60:	printf("Test 3: Check played card count\n");
        1:   61:	if (g.playedCardCount == 1) {
        1:   62:		printf("greatHallCard(): PASS when test contains playedCardCount of 1\n");
        -:   63:	} else {
    #####:   64:		success = 0;
    #####:   65:		printf("greatHallCard(): FAIL when test contains playedCardCount of 1\n");
        -:   66:	}
        -:   67:
        1:   68:	printf("Test 4: Check number of actions\n");
        1:   69:	if (g.numActions == 2) {
        1:   70:		printf("greatHallCard(): PASS when test contains numActions == 2\n");
        -:   71:	} else {
    #####:   72:		success = 0;
    #####:   73:		printf("greatHallCard(): FAIL when test contains numActions == 2\n");
        -:   74:	}
        -:   75:
        1:   76:	printf("Test 5: Check if great hall card is in the played cards pile\n");
        1:   77:	if (g.playedCards[g.playedCardCount - 1] == great_hall) {
        1:   78:		printf("greatHallCard(): PASS when test contains the great_hall card in the playedCards pile\n");
        -:   79:	} else {
    #####:   80:		success = 0;
    #####:   81:		printf("greatHallCard(): FAIL when test contains the great_hall card in the playedCards pile\n");
        -:   82:	}
        -:   83:
        1:   84:	printf("Test 6: Check player 2 deck count state\n");
        1:   85:	if (g.deckCount[player2] == initialDeckCount2) {
        1:   86:		printf("greatHallCard(): PASS when test contains deckCount of player 2 state unchanged\n");
        -:   87:	} else {
    #####:   88:		success = 0;
    #####:   89:		printf("greatHallCard(): FAIL when test contains deckCount of player 2 state unchanged\n");
        -:   90:	}
        -:   91:
        1:   92:	printf("Test 7: Check player 2 hand count state\n");
        1:   93:	if (g.handCount[player2] == initialHandCount2) {
        1:   94:		printf("greatHallCard(): PASS when test contains handCount of plyaer 2 state unchanged\n");
        -:   95:	} else {
    #####:   96:		success = 0;
    #####:   97:		printf("greatHallCard(): FAILS when test contains handCount of plyaer 2 state unchanged\n");
        -:   98:	}
        -:   99:
        1:  100:	printf("Test 8: Check victory card supply state\n");
        1:  101:	if (g.supplyCount[estate] == 8 && g.supplyCount[duchy] == 8 && g.supplyCount[province] == 8) {
        1:  102:		printf("greatHallCard(): PASS when test contains supply of victory card state unchanged\n");
        -:  103:	} else {
    #####:  104:		success = 0;
    #####:  105:		printf("greatHallCard(): FAIL when test contains supply of victory card state unchanged\n");
        -:  106:	}
        -:  107:
        1:  108:	printf("Test 9: Check kingdom card supply state\n");
        1:  109:	int isUnchanged = 1;
       11:  110:	for (i = 0; i < 10; i++) {
       10:  111:		if (g.supplyCount[i] != originalSupply[i]) {
    #####:  112:			isUnchanged = 0;
        -:  113:		}
        -:  114:	}
        -:  115:
        1:  116:	if (isUnchanged) {
        1:  117:		printf("greatHallCard(): PASS when test contains supply of kingdom cards state unchanged\n");
        -:  118:	} else {
    #####:  119:		success = 0;
    #####:  120:		printf("greatHallCard(): FAIL when test contains supply of kingdom cards state unchanged\n");
        -:  121:	}
        -:  122:
        1:  123:	if (success) {
        1:  124:		printf("\n\n--------------- TESTING SUCCESS ---------------\n");
        -:  125:	} else {
    #####:  126:		printf("\n\n--------------- TESTING FAILURE ---------------\n");
        -:  127:	}
        1:  128:	printf("\n\n--------------- TESTING COMPLETE for Great Hall ---------------\n");
        1:  129:}
        -:  130:
        1:  131:int main(int argc, char* argv[]) {
        1:  132:	testGreatHallCard();
        1:  133:	return 0;
        -:  134:}
