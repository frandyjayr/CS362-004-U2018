        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:
        -:    5:// The following is a unit test for the kingdomCards function within the dominion.c/dominon.h file
        -:    6:
        1:    7:void testKingdomCards() {
        1:    8:	int k1 = 1;
        1:    9:	int k2 = 2;
        1:   10:	int k3 = 3;
        1:   11:	int k4 = 4;
        1:   12:	int k5 = 5;
        1:   13:	int k6 = 6;
        1:   14:	int k7 = 7;
        1:   15:	int k8 = 8;
        1:   16:	int k9 = 9;
        1:   17:	int k10 = 10;
        -:   18:
        1:   19:	int success = 1;
        1:   20:	int* k = malloc(10 * sizeof(int));
        -:   21:
        1:   22:	k = kingdomCards(k1, k2, k3, k4, k5, k6, k7, k8, k9, k10);
        -:   23:
        1:   24:	printf("--------------- TESTING FUNCTION: kingdomCards() ---------------\n");
        1:   25:	printf("Test 1: Test array slot 1 is correct\n");
        1:   26:	if (k[0] == 1) {
        1:   27:		printf("kingdomCards(): PASS when test contains k[0] == 1\n");
        -:   28:	} else {
    #####:   29:		success = 0;
    #####:   30:		printf("kingdomCards(): FAIL when test contains k[0] == 1\n");
        -:   31:	}
        -:   32:
        1:   33:	printf("Test 2: Test array slot 2 is correct\n");
        1:   34:	if (k[1] == 2) {
        1:   35:		printf("kingdomCards(): PASS when test contains k[1] == 2\n");
        -:   36:	} else {
    #####:   37:		success = 0;
    #####:   38:		printf("kingdomCards(): FAIL when test contains k[1] == 2\n");
        -:   39:	}
        -:   40:
        1:   41:	printf("Test 3: Test array slot 3 is correct\n");
        1:   42:	if (k[2] == 3) {
        1:   43:		printf("kingdomCards(): PASS when test contains k[2] == 3\n");
        -:   44:	} else {
    #####:   45:		success = 0;
    #####:   46:		printf("kingdomCards(): FAIL when test contains k[2] == 3\n");
        -:   47:	}
        -:   48:
        1:   49:	printf("Test 4: Test array slot 4 is correct\n");
        1:   50:	if (k[3] == 4) {
        1:   51:		printf("kingdomCards(): PASS when test contains k[3] == 4\n");
        -:   52:	} else {
    #####:   53:		success = 0;
    #####:   54:		printf("kingdomCards(): FAIL when test contains k[3] == 4\n");
        -:   55:	}
        -:   56:
        1:   57:	printf("Test 5: Test array slot 5 is correct\n");
        1:   58:	if (k[4] == 5) {
        1:   59:		printf("kingdomCards(): PASS when test contains k[4] == 5\n");
        -:   60:	} else {
    #####:   61:		success = 0;
    #####:   62:		printf("kingdomCards(): FAIL when test contains k[4] == 5\n");
        -:   63:	}
        -:   64:
        1:   65:	printf("Test 6: Test array slot 6 is correct\n");
        1:   66:	if (k[5] == 6) {
        1:   67:		printf("kingdomCards(): PASS when test contains k[5] == 6\n");
        -:   68:	} else {
    #####:   69:		success = 0;
    #####:   70:		printf("kingdomCards(): FAIL when test contains k[5] == 6\n");
        -:   71:	}
        -:   72:
        1:   73:	printf("Test 7: Test array slot 7 is correct\n");
        1:   74:	if (k[6] == 7) {
        1:   75:		printf("kingdomCards(): PASS when test contains k[6] == 7\n");
        -:   76:	} else {
    #####:   77:		success = 0;
    #####:   78:		printf("kingdomCards(): FAIL when test contains k[6] == 7\n");
        -:   79:	}
        -:   80:
        1:   81:	printf("Test 8: Test array slot 8 is correct\n");
        1:   82:	if (k[7] == 8) {
        1:   83:		printf("kingdomCards(): PASS when test contains k[7] == 8\n");
        -:   84:	} else {
    #####:   85:		success = 0;
    #####:   86:		printf("kingdomCards(): FAIL when test contains k[7] == 8\n");
        -:   87:	}
        -:   88:
        1:   89:	printf("Test 9: Test array slot 9 is correct\n");
        1:   90:	if (k[8] == 9) {
        1:   91:		printf("kingdomCards(): PASS when test contains k[8] == 9\n");
        -:   92:	} else {
    #####:   93:		success = 0;
    #####:   94:		printf("kingdomCards(): FAIL when test contains k[8] == 9\n");
        -:   95:	}
        -:   96:
        1:   97:	printf("Test 10: Test array slot 10 is correct\n");
        1:   98:	if (k[9] == 10) {
        1:   99:		printf("kingdomCards(): PASS when test contains k[9] == 10\n");
        -:  100:	} else {
    #####:  101:		success = 0;
    #####:  102:		printf("kingdomCards(): FAIL when test contains k[9] == 10\n");
        -:  103:	}
        -:  104:
        1:  105:	if (success) {
        1:  106:		printf("\n--------------- TESTING SUCCESS ---------------\n");
        -:  107:
        -:  108:	} else {
    #####:  109:		printf("\n--------------- TESTING FAILURE ---------------\n");
        -:  110:
        -:  111:	}
        1:  112:	printf("\n--------------- TESTING COMPLETE for kingdomCards() ---------------\n");
        1:  113:}
        -:  114:
        1:  115:int main(int argc, char* argv[]) {
        1:  116:	testKingdomCards();
        1:  117:	return 0;
        -:  118:}
