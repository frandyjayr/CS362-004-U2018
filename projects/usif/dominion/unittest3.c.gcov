        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:
        -:    5:// The following is a unit test for the isGameOver function within the dominion.c/dominon.h file
        -:    6:
        1:    7:void testIsGameOver() {
        1:    8:	struct gameState* g = malloc(sizeof(struct gameState));
        1:    9:	int success = 1;
        -:   10:	// Test 1 to see if province stack is empty	
        1:   11:	g->supplyCount[province] = 0;
        -:   12:
        1:   13:	printf("--------------- TESTING FUNCTION: isGameOver() ---------------\n");
        1:   14:	printf("Test 1: Test when province supply is 0\n");
        1:   15:	if (isGameOver(g)) {
        1:   16:		printf("isGameOver(): PASS when gameState contains state->supplyCount[province] == 0\n");
        -:   17:	} else {
    #####:   18:		success = 0;
    #####:   19:		printf("isGameOver(): FAIL when gameState contains state->supplyCount[province] == 0\n");
        -:   20:	}
        -:   21:
        -:   22:	// Test 2 to see if any three piles (not including province) are empty  
        1:   23:	int nonEmpty = 1,
        1:   24:	    empty = 0,
        -:   25:	    i;
        -:   26:
       28:   27:	for (i = 0; i < treasure_map + 1; i++) {
       27:   28:		g->supplyCount[i] = nonEmpty;
        -:   29:	} 
        1:   30:	g->supplyCount[copper] = empty;
        1:   31:	g->supplyCount[silver] = empty;
        1:   32:	g->supplyCount[gold] = empty;
        -:   33:
        1:   34:	printf("Test 2: Test when 3 supply stacks are empty\n");
        1:   35:	if (isGameOver(g)) {
        1:   36:		printf("isGameOver(): PASS when gameState contains 3 empty stacks\n");
        -:   37:	} else {
    #####:   38:		success = 0;
    #####:   39:		printf("isGameOver(): FAIL when gameState contains 3 empty stacks\n");
        -:   40:	}
        -:   41:
        -:   42:	// Test 3 to see if the game does NOT end if province is nonempty and less than 3 stacks are empty
       28:   43:	for (i = 0; i < treasure_map + 1; i++) {
       27:   44:		g->supplyCount[i] = nonEmpty;
        -:   45:	} 
        1:   46:	g->supplyCount[copper] = empty;
        1:   47:	g->supplyCount[silver] = empty;
        -:   48:
        1:   49:	printf("Test 3: Test when 2 supply stacks are empty\n");
        1:   50:	if (!isGameOver(g)) {
        1:   51:		printf("isGameOver(): PASS when gameState contains less than 3 empty stacks and province is non-empty\n");
        -:   52:	} else {
    #####:   53:		success = 0;
    #####:   54:		printf("isGameOver(): FAIL when gameState contains less than 3 empty stacks and province is non-empty\n");
        -:   55:	}
        -:   56:
        1:   57:	if (success) {
        1:   58:		printf("\n-------------- TESTING SUCCESS --------------- \n");
        -:   59:	} else {
    #####:   60:		printf("\n-------------- TESTING FAILURE --------------- \n");
        -:   61:	}
        1:   62:	printf("\n-------------- TESTING COMPLETE for isGameOver() --------------- \n");
        1:   63:}
        -:   64:
        1:   65:int main(int argc, char* argv[]) {
        1:   66:	testIsGameOver();
        1:   67:	return 0;
        -:   68:}
